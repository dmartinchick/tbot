import data
from aiogram.types.message import Message
from data.config import ADMINS
from datetime import datetime
from typing import Text

from aiogram.dispatcher.filters.builtin import CommandSettings
from aiogram.types.user import User
from keyboards.inline import callback_datas
import logging
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.dispatcher.filters import Command
from aiogram.utils import callback_data
from loader import dp

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# from keyboards.inline.callback_datas import start_choice
from keyboards.inline.start_menu import kb_start_menu
from keyboards.inline.table_menu import kb_table_menu
from keyboards.inline.event_info import kb_event_card_info

from utils.db_api.sqlighter import SQL
from utils.misc import card

@dp.message_handler(commands=['–ú–µ–Ω—é','menu'], commands_prefix=['‚†Ä','/'])
async def show_inline_menu(message: types.Message):
    await message.answer("–û —á–µ–º —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?", reply_markup=kb_start_menu)


@dp.message_handler(Command("f_admin_microlabML2160"))
async def show_inline_admin_panel(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        message (types.Message): [description]
    """
    message_user = str(User.get_current()['id'])
    
    if message_user in ADMINS:
        await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        await message.answer("–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


@dp.callback_query_handler(text_contains="what_now")
async def show_what_now(call: types.CallbackQuery):
    """ –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–µ, –∞ —Ç–∞–∫ –∂–µ –±–ª–∏–∂–∞–µ—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—Ç–∏–µ
    """
    
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    # rq = SQL.request_what_now()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∏ —Å–∞–º–æ–≥–æ –ø–æ–∑–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    dt_start = SQL.find_date_start()
    dt_end = SQL.find_date_end()
    # tdate = datetime.now().strftime('%d.%m %H:%M')
    tdate = datetime(2021, 6, 18, 19, 40).strftime('%d.%m %H:%M')
    if tdate < dt_start:
        await call.message.answer("üòÅ –§–µ—Å—Ç–∏–≤–∞–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, \n–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ 18 –∏—é–Ω—è!")
    elif tdate > dt_end:
        await call.message.answer("‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ")
    else:
        await call.message.answer(text='ü§ì –°–µ–π—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç ü§ì')
        
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        rq = SQL.what_now()
        # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        for event in rq:
            # –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö    
            event_name = event[0]
            time_start = event[1].strftime('%d.%m %H:%M')
            time_end = event[2].strftime('%d.%m %H:%M')
            address = event[3]
            contains = event[4]
            
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—É—Ä—Å–µ
            await call.message.answer_photo(photo=open(address,'rb'),caption="‚ùó" + event_name, reply_markup=kb_event_card_info)
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä—Å–µ
        

@dp.callback_query_handler(text_contains="what_next")
async def show_what_next(call: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–µ, –∞ —Ç–∞–∫ –∂–µ –±–ª–∏–∂–∞–µ—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—Ç–∏–µ
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –ø–æ–∑–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    dt_end = SQL.find_date_end()
    # tdate = datetime.now().strftime('%d.%m %H:%M')
    tdate = datetime(2021, 6, 18, 19, 40).strftime('%d.%m %H:%M')
    if tdate > dt_end:
        await call.message.answer("‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ")
    else:
        await call.message.answer(text='üïë –°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è')
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ä–ø—Ä–∏—Ç–∏—è
        rq_next = SQL.what_next()
        for event in rq_next:
            event_name = event[0]
            time_start = event[1].strftime('%d.%m %H:%M')
            time_end = event[2].strftime('%d.%m %H:%M')
            address = event[3]
            contains = event[4]
        await call.message.answer_photo(photo=open(address,'rb'),caption="‚ùó"+event_name+"\n"+"‚è≥ –ö–æ–Ω–∫—É—Ä—Å –Ω–∞—á–∏–Ω–µ—Ç—Å—è: "+time_start, reply_markup=kb_event_card_info)


@dp.callback_query_handler(text_contains="festival_map")
async def show_festival_map(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer_photo(photo=open(r"data\img\festival_map.jpg",'rb'),caption="–í —Ä–∞—Å–ø–æ–ª–µ–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")



@dp.callback_query_handler(text_contains="full_schedule")
async def show_full_schedule(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    Args:
        call (types.CallbackQuery): [description]
    """
    
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    await call.message.answer(card.full_schedule())
    # TODO: –†–µ–∞–ª–∏–∑–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

@dp.callback_query_handler(text_contains="tables")
async def show_table(call: types.CallbackQuery):
    """ –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ inline –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫—É–±–∫–æ–≤
    """
    
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer("–ö–∞–∫–æ–π –∫—É–±–æ–∫ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb_table_menu)
    # TODO: –¥–ª–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏ + –∫–∞—Ä—Ç–∏–Ω–∫—É??


@dp.callback_query_handler(text_contains='share')
async def show_share(call: types.CallbackQuery):
    """–†–µ–∞–ª–∏–∑—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer_photo(photo=open(r'data\img\share.jpg', 'rb'), caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥")


@dp.callback_query_handler(text_contains='about')
async def show_about_info(call: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ—Å—Ç–∏–≤–∞–ª–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ç–µ—Ä–∏—Å–ª–µ—Ç—É

    Args:
        call (types.CallbackQuery): [description]
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer_document(document=open(r'data\docs\svarog2021_rule.pdf','rb'),caption='–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –°–≤–∞—Ä–æ–≥ 2021')


@dp.callback_query_handler(text_contains="event_rules")
async def show_events_rules(call: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤

    Args:
        call (types.CallbackQuery): [description]
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–∑–ø—Ä–æ—Å –∫ –ë–î —Å–æ —Å–±–æ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —ç—Ç–æ–π –∏–Ω—Ñ—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer_photo(photo=open(r'data\img\body_art.jpg','rb'),caption="–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


@dp.callback_query_handler(text_contains="event_info")
async def show_events_info(call: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—É—Ä—Å–µ (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –æ–∫–∞–Ω—á–∞–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –º–µ—Å—Ç–æ —Å—Ç–∞—Ä—Ç–∞)

    Args:
        call (types.CallbackQuery): [description]
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer(text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


# TODO: cancel
