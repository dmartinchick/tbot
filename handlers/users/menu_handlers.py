import data
from aiogram.types.message import Message
from data.config import ADMINS
from datetime import datetime
from typing import Text

from aiogram.dispatcher.filters.builtin import CommandSettings
from aiogram.types.user import User
from keyboards.inline import callback_datas
import logging
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.dispatcher.filters import Command
from aiogram.utils import callback_data
from loader import dp

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# from keyboards.inline.callback_datas import start_choice
from keyboards.inline.start_menu import kb_start_menu
from keyboards.inline.table_menu import kb_table_menu

from utils.db_api.sqlighter import SQL
from utils.misc import card

@dp.message_handler(commands=['–ú–µ–Ω—é','menu'], commands_prefix=['‚†Ä','/'])
async def show_inline_menu(message: types.Message):
    await message.answer("–û —á–µ–º —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?", reply_markup=kb_start_menu)


@dp.message_handler(Command("f_admin_microlabML2160"))
async def show_inline_admin_panel(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Args:
        message (types.Message): [description]
    """
    message_user = str(User.get_current()['id'])
    
    if message_user in ADMINS:
        await message.answer("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    else:
        await message.answer("–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –¥–∞–Ω–Ω–æ–µ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


@dp.callback_query_handler(text_contains="what_now")
async def show_what_now(call: types.CallbackQuery):
    """ –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–µ, –∞ —Ç–∞–∫ –∂–µ –±–ª–∏–∂–∞–µ—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—Ç–∏–µ

    Args:
        call (types.CallbackQuery): [description]
    """
    
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    # rq = SQL.request_what_now()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∏ —Å–∞–º–æ–≥–æ –ø–æ–∑–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    dt_start = SQL.find_date_start()
    dt_end = SQL.find_date_end()
    # tdate = datetime.now().strftime('%d.%m %H:%M')
    tdate = datetime(2021, 6, 19, 14, 50).strftime('%d.%m %H:%M')
    if tdate < dt_start:
        await call.message.answer("üòÅ –§–µ—Å—Ç–∏–≤–∞–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, \n–≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞ 18 –∏—é–Ω—è!")
    elif tdate > dt_end:
        await call.message.answer("‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ")
    else:       
        await call.message.answer_photo(photo=open(r'data\img\1851521_850x500_fit-1433194394.jpg','rb'),caption=card.card_what_now())
        # await call.message.answer(card.card_what_now())
        # await call.message.answer_media_group()


    #TODO: –∑–∞–º–µ–Ω–∏—Ç—å SQL.request_what_now –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏. —Å–º.try.py
    

@dp.callback_query_handler(text_contains="full_schedule")
async def show_full_schedule(call: types.CallbackQuery):
    """ –ü–æ–∫–∞–∑–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

    Args:
        call (types.CallbackQuery): [description]
    """
    
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    await call.message.answer(card.full_schedule())
    # TODO: –†–µ–∞–ª–∏–∑–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

@dp.callback_query_handler(text_contains="table")
async def show_table(call: types.CallbackQuery):
    """ –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ inline –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫—É–±–∫–æ–≤

    Args:
        call (types.CallbackQuery): [description]
    """
    
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer("–ö–∞–∫–æ–π –∫—É–±–æ–∫ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb_table_menu)
    # TODO: –¥–ª–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏ + –∫–∞—Ä—Ç–∏–Ω–∫—É??

@dp.callback_query_handler(text_contains="subscriptions")
async def show_subscriptions(call: types.CallbackQuery):
    """ –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

    Args:
        call (types.CallbackQuery): [description]
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data}")

    await call.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å?")
    
# TODO: cancel
